---
#
# Main Playbook To Prepare An Cluster Nodes
#
- hosts: all
  become: yes
  become_user: root
  vars:
    ansible_connection: local
    ansible_python_interpreter: '{{ansible_playbook_python}}'
    token_nodes_dir: '/home/token-nodes/'
    helm_ver: 'v3.7.2'

  tasks:
  - name: add official GPG signing keys of third-party distributed tools
    apt_key: url={{item}} state=present
    loop:
    - https://download.docker.com/linux/ubuntu/gpg 
    - https://apt.releases.hashicorp.com/gpg

  - name: add repository list for third-party distributed tools
    copy:
      src: ./templates/
      dest: /etc/apt/sources.list.d/

  - name: run 'apt update' to update cache if the last one is older than 1hr ago
    apt: update_cache=yes cache_valid_time=3600

  - name: set environment dependencies of the Cluster Nodes
    apt: name={{item}} state=latest
    loop:
    - apt-transport-https
    - aria2
    - arping
    - bash-completion
    - build-essential
    - ca-certificates
    - curl
    - dnsutils
    - fswatch
    - fuse
    - git
    - gnupg
    - golang
    - htop
    - ipvsadm
    - jq
    - jsonnet
    - keychain
    - lxc-utils
    - lxc-templates
    - lxctl
    - manpages-dev
    - mariadb-client
    - net-tools
    - nfs-common
    - nfs4-acl-tools
    - nfstrace
    - nfstrace-doc
    - nfswatch
    - nmap
    - pandoc
    - postgresql-client
    - python3-dev
    - python3-pip
    - sshfs
    - sshpass
    - snapd
    - software-properties-common
    - terraform
    - tig
    - tmux
    - torbrowser-launcher
    - tree
    - unzip
    - whois
    - yamllint
    - zip

  - name: install container runtime engine and distributed file system
    apt: name={{item}} state=latest
    loop:
    - containerd.io
    - docker-ce
    - docker-ce-cli

  - name: start added service and enable at boot time
    systemd: name={{item}} state=started enabled=yes
    loop:
    - containerd
    - docker

#
# manage snaps
#
  - name: install classic-snap packages
    snap: name={{item}} state=present classic=yes
    loop:
    - aws-cli
    - doctl
    - google-cloud-sdk
    - helm
    - lnav
    - tunnel

#
# manage python
#
  - name: install python packages
    pip: name={{item}} state=latest executable=pip3
    loop:
    - pip
    - docker-compose
    - docker
    - httpie
    - mdv
    - ruamel.yaml.cmd
    - sshuttle
    - sshoot
    - speedtest-cli
    - yq

#
# manage software distributed in binary format
#
  - name: download and install "minikube"
    get_url:
      url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
      dest: /usr/local/bin/minikube
      mode: 0755

#  - name: download and install "helm"
#    unarchive:
#      src: https://get.helm.sh/helm-{{helm_ver}}-linux-arm64.tar.gz      
#      dest: /usr/local/bin
#      extra_opts: [--strip-components=1]
#      remote_src: yes
#      mode: 0755

#  - name: create token nodes folder
#    file: 
#      path: "{{token_nodes_dir}}"
#      state: directory
#      owner: root
#      group: gluzangi
#      recurse: yes
#      mode: 0775
